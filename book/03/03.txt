数据库与ORM

很多人在大学都学过数据库，喜欢用那些第一范式，第二范式 ... 第X范式，来指导表设计。

这些设计思想充满了形式上的优雅和数学上的美感，不过正如一位低调的前辈大牛所说的那样：

“
学者要干的事情和街上混的程序员们干的事情完全不同，解决方案自然也完全两样。拿学术大师的话去指导产品开发，是要吃大亏的 ...
”

好吧，先把那些范式忘了吧，欢迎回到现实世界。

众所周知，ACID是Atomicity（原子性）, Consistency（一致性）, Isolation（隔离性）, 和 Durability（持久性）的缩写。

ACID原则被多数商业数据库产品的严格准则。

但大规模Web网站为了可扩展性和可靠性，往往弃用ACID，而采用BASE这种更为松散的模式。 

BASE 策略是 Eric A. Brewer 在 1988 年提出的。这几个缩写词如下定义：

Basically Availble --基本可用
Soft-State --   软状态（可以理解为，无连接）
Eventual Consistency --最终一致性

最简单的建议就是，给一个为小规模应用而设计的架构增加资源并不能让它变成大规模的架构。你必须打破常规模式，比如ACID和分布式事务。乐于寻找机会放松一些约束，即使传统上认为是不能放松的。

亚马逊CTO Werner Vogels引用Eric Brewer的CAP定理提供了一些权衡取舍更深层的背景。

对于数据共享系统的三项属性——数据一致性、系统可用性、对网络分区的耐受性——在同一时间只能达成其中的两项。

换句话说，一个不能容忍网络分区的系统可以利用像事务这样普通的技术来实现一致性和可用性。然而，像亚马逊和eBay这样的大型分布式系统，网络分区是既定的。它的后果就是，大型分布式系统的架构必须决定时放松对一致性的要求，还是放松对可用性的要求。两种选择都会给开发人员造成一些负担，他们需要了解他们处理的架构的特点。比如说，如果你选择放松一致性要求，那么开发人员就要决定怎样处理这种情形——对系统的写入不会立即反映到对应的读出中。就像Windows Live项目经理Dare Obasanjo在他的博客中写的一样。



还有两条简单的原则：把每样东西都设计成分离的；考虑BASE、而不是ACID。


数据表 索引表


洪强宁


CREATE DATABASE wtree CHARACTER SET utf8 COLLATE utf8_bin;

表小 数据切片



提示：使用UTF8时为了节省空间，使用VARCHAR而不要用CHAR。否则，MySQL必须为一个CHAR(10) CHARACTER SET utf8列预备30个字节，因为这是可能的最大长度。

column1 VARCHAR(5) CHARACTER SET latin1 COLLATE latin1_german1_ci


MySQL官方文档 page:other/learn_html_css.chm

用户表 用户身份 管理员 企业 个人








    * 确保表表示单个主题:                 类似面向对象的单职责原则，一个对象一个职责。
    * 确保每个表都有一个主键：         主键唯一的标识了表中的每条记录；它还用来建立表之间的关系。
    * 确保字段只包含一个单独的值：   一个字段只表示一个内容。
    * 确保表中没有需要计算的字段
    (减少计算 容忍冗余)
    
现在，一个结构良好的表算是设计好了，现在我们可以把单个Employee和任意多个Committee关联起来，也可以把单个Committee和任意多个Employee关联起来。而且，可以使用一条SQL语句来同时查看来自所有这3个表的信息。
